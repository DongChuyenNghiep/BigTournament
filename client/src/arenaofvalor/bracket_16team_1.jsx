import React, { useEffect, useState, useRef } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
import Image from '../image/waiting.png'
const TournamentBracketAOV16 = () => {
    const [teams, setTeams] = useState([[], [], [], [], [], []]);
    const [loading, setLoading] = useState(true);
    const [idmatch, setMatchId] = useState([]);
    const containerRef = useRef(null);

    // H√†m l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets v√† backend
    const fetchTeams = async () => {
        
        try {
            const response = await fetch(
                "https://docs.google.com/spreadsheets/d/1ZGF4cPHRmKL5BSzgAMtUD2WWYrB-Dpx8Q_gFha5T0dY/gviz/tq?sheet=Swiss Stage 1&range=A1:R20"
            );
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const text = await response.text();
            const json = JSON.parse(text.substring(47, text.length - 2));

            const teamResponse = await fetch(
                "https://dongchuyennghiep-backend.vercel.app/api/auth/findallteamAOV",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                }
            );
            if (!teamResponse.ok) throw new Error(`HTTP error! status: ${teamResponse.status}`);
            const teamData = await teamResponse.json();

            const columns = [0, 3, 6, 9, 12, 15];
            const updatedTeams = columns.map((col) =>
                json.table.rows.map((row) => {
                    const teamName = row.c[col + 1]?.v || "Unknown";
                    const team = teamData.find((t) => t.teamName === teamName);

                    return {
                        name: teamName,
                        icon: team ? `https://drive.google.com/thumbnail?id=${team.logoUrl}` : Image,
                        score: row.c[col + 2]?.v || 0,
                    };
                })
            );

            setTeams(updatedTeams);
        } catch (error) {
            console.error("Failed to fetch teams:", error);
        } finally {
            setLoading(false);
        }
    };
    useEffect(() => {
        const scrollToTop = () => {
            document.documentElement.scrollTop = 0;
        };
        setTimeout(scrollToTop, 0);
        document.title = "V√≤ng Th·ª•y S·ªπ 1";

    }, []);
    const handleScrollLeft = () => {
        if (containerRef.current) {
            containerRef.current.scrollLeft -= 200;
        }
    };

    const handleScrollRight = () => {
        if (containerRef.current) {
            containerRef.current.scrollLeft += 200;
        }
    };


    // H√†m l·∫•y d·ªØ li·ªáu danh s√°ch tr·∫≠n ƒë·∫•u t·ª´ backend
    const fetchGames = async () => {
        try {
            const response = await axios.post(
                "https://dongchuyennghiep-backend.vercel.app/api/auth/findallmatchid"
            );
            const filteredGames = response.data.filter((game) => game.game === "Arena Of Valor");

            setMatchId(filteredGames);
        } catch (error) {
            console.error("Failed to fetch games:", error);
        }
    };

    useEffect(() => {
        fetchTeams();
        fetchGames();
    }, []);

    // H√†m t·∫°o ƒë∆∞·ªùng d·∫´n cho t·ª´ng tr·∫≠n ƒë·∫•u
    const getMatchLink = (team1, team2) => {
        if (!team1.name || !team2.name) return "#";

        const match = idmatch.find(
            (m) =>
                (m.teamA.toLowerCase() === team1.name.toLowerCase() &&
                    m.teamB.toLowerCase() === team2.name.toLowerCase()) ||
                (m.teamA.toLowerCase() === team2.name.toLowerCase() &&
                    m.teamB.toLowerCase() === team1.name.toLowerCase())
        );

        if (match) {
            return `/arenaofvalor/match/${match.round}/${match.Match}`;
        } else {
            return "#";
        }
    };

    // H√†m render th√¥ng tin c·ªßa t·ª´ng c·∫∑p ƒë·∫•u
    const renderMatchup = (team1, team2, hasMargin = true) => (
        <Link
            to={getMatchLink(team1, team2)}
            className={`relative flex flex-col gap-y-[3px] overflow-hidden ${hasMargin ? "my-4" : "mb-0"
                }`}
        >
            {[team1, team2].map((team, index) => (
                <div
                    key={index}
                    className="2xl:pl-[6px] pl-[4px] flex items-center justify-between bg-white"
                >
                    <div className="flex items-center ">
                        <img
                            src={team?.icon}
                            alt={team?.name || "Team Logo"}
                            className="w-9 h-9 mr-4 ml-1"
                        />
                        <span className="text-black">{team?.name || "Unknown"}</span>
                    </div>
                    <div className="flex items-center justify-center w-14 h-14 bg-[#d9d9d9e5]">
                        <span className="font-bold text-[#f4aa49ef] text-[19px]">
                            {team?.score || 0}
                        </span>
                    </div>
                </div>
            ))}
        </Link>
    );

    // H√†m render c√°c ph·∫ßn section cho t·ª´ng v√≤ng ƒë·∫•u
    const renderSection = (title, matchups, className = "") => (
        <div className={`flex flex-col ${className} border-2 border-gray-300 rounded-lg overflow-hidden`}>
            <h2 className="text-lg font-bold p-2 bg-[#D9D9D94D] border-b border-gray-300">
                {title}
            </h2>
            <div className="py-2 px-4 bg-[#D9D9D94D]">
                {matchups.map((matchup, index) => (
                    <div key={index}>
                        {renderMatchup(matchup[0] || {}, matchup[1] || {})}
                    </div>
                ))}
            </div>
        </div>
    );
    // H√†m render c√°c ƒë·ªôi ti·∫øn v√†o v√≤ng lo·∫°i tr·ª±c ti·∫øp
    const renderAdvanceSection = () => (
        <div className="flex flex-col border-2 border-gray-300 rounded-lg overflow-hidden relative">
            <h2 className="text-lg font-bold p-2 bg-[#D9D9D94D] border-b border-gray-300">
                Ti·∫øn t·ªõi Play-off
            </h2>
            <div className="p-2">
                {teams[5].slice(0, 8).map((team, index) => (
                    <div key={index} className="flex items-center justify-between p-2 border-b last:border-b-0">
                        <div className="flex items-center">
                            {team.icon !== "üèÖ" ? (
                                <img src={team.icon} alt={team.name || "Team Logo"} className="w-8 h-8 mr-2" />
                            ) : (
                                <span className="w-8 h-8 mr-2">{team.icon}</span>
                            )}
                            <span>{team.name || "Unknown"}</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );

    // H√†m render c√°c ƒë·ªôi b·ªã lo·∫°i
    const renderEliminateSection = () => (
        <div className="flex flex-col border-2 border-gray-300 overflow-hidden relative rounded-lg">
            <h2 className="text-lg font-bold p-2 bg-[#D9D9D94D] border-b border-gray-300">
                B·ªã lo·∫°i
            </h2>
            <div className="p-2">
                {teams[5].slice(9, 17).map((team, index) => (
                    <div key={index} className="flex items-center justify-between p-2 border-b last:border-b-0">
                        <div className="flex items-center">
                        {team.icon !== "üö´" ? (
                                <img src={team.icon} className="w-8 h-8 mr-2" />
                            ) : (
                                <span className="w-8 h-8 mr-2">{team.icon}</span>
                            )}
                            <span>{team.name || "Unknown"}</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
    return (
        <div className="relative w-[95%] lg:w-full mx-auto " id="bracket"  style={{ overflowX: 'scroll' }}>
            
            {loading ? (
                <div className="flex items-center justify-center min-h-screen">
                    <span className="loading loading-dots loading-lg text-primary"></span>
                </div>
            ) : (
                <>
                <h1 className="text-3xl font-bold mb-6 text-center mt-24">V√≤ng Th·ª•y S·ªπ 1</h1>
            <div className="max-w-[900px] justify-center flex flex-col mx-auto">
    <p>Hiii! Xin ch√†o t·∫•t c·∫£ c√°c b·∫°n, ch√†o m·ª´ng c√°c b·∫°n ƒë√£ ƒë·∫øn v·ªõi v√≤ng ƒë·∫•u Th·ª•y Sƒ©, v√† ƒë√¢y l√† m·ªôt s·ªë lu·∫≠t l·ªá t·ª•i m√¨nh s·∫Ω c√≥ update th√™m trong t∆∞∆°ng lai nhaaaa: </p>
    <ul class="list-disc">
        <li>8 ƒë·ªôi g·ªìm 2 ƒë·ªôi th·∫Øng ·ªü nh√°nh 2-0, 3 ƒë·ªôi ·ªü nh√°nh 2-1 v√† 3 ƒë·ªôi th·∫Øng ·ªü nh√°nh 2-2 s·∫Ω ƒëi ti·∫øp.</li>
        <li>8 ƒë·ªôi g·ªìm 2 ƒë·ªôi thua ·ªü nh√°nh 0-2, 3 ƒë·ªôi thua ·ªü nh√°nh 1-2 v√† 3 ƒë·ªôi thua ·ªü nh√°nh 2-2 s·∫Ω b·ªã lo·∫°i.</li>
        <li>T·∫•t c·∫£ c√°c tr·∫≠n ·ªü ƒë√¢y l√† BO1. Ri√™ng c√°c tr·∫≠n quy·∫øt ƒë·ªãnh (2-0, 0-2, 2-1, 1-2, 2-2) s·∫Ω l√† BO3.</li>
        <li>C√°c b·∫°n c√≥ th·ªÉ ki·ªÉm tra k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u b·∫±ng c√°ch ·∫•n v√†o c·∫∑p tr·∫≠n.</li>
        <li>Th·ªùi gian s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o ·ªü k√™nh ri√™ng tr√™n <a href="https://discord.gg/4AGUSHS2">Discord </a>.</li>
        <li>Tr∆∞·ªõc gi·ªù thi ƒë·∫•u 12h c√°c b·∫°n ph·∫£i ƒë∆∞a l·∫°i ƒë·ªôi h√¨nh cho BTC ƒë·ªÉ b·ªçn m√¨nh d·ªÖ d√†ng ki·ªÉm so√°t th√¥ng tin ng∆∞·ªùi ch∆°i.</li>
        <li>M·ªçi th√¥ng tin kh√°c t·ª•i m√¨nh s·∫Ω th√¥ng b√°o ri√™ng tr√™n k√™nh ƒë·∫•u gi·∫£i.</li>
    </ul>
    <p> V√† ƒë√≥ l√† t·∫•t c·∫£ nh·ªØng ƒëi·ªÅu ch√∫ng m√¨nh mu·ªën g·ª≠i ƒë·∫øn c√°c b·∫°n, ch√∫c c√°c b·∫°n thi ƒë·∫•u t·ªët nhaaaaaaa.</p>
</div>
           <div className="lg:flex justify-end hidden -z-99 mr-10 gap-1">
            <button
                onClick={handleScrollLeft}
                type="button"
                className="font-bold bg-primary text-white rounded-[50%] w-10 h-10 p-1 z-50"
            >
                &lt;
            </button>
            <button
                onClick={handleScrollRight}
                type="button"
                className="font-bold bg-primary text-white p-2 rounded-[50%] w-10 h-10 z-50"
            >
                &gt;
            </button>
            </div>
            <div className="w-full overflow-x-scroll scrollbar-none" ref={containerRef}>
                    <div  className="flex flex-col lg:flex-row justify-between lg:space-x-4 relative w-full lg:w-[140%] mx-auto">
                        <div className="w-full lg:w-1/6 lg:mt-40 mt-10 relative">
                            {renderSection("0W-0L", [
                                [teams[0][0], teams[0][1]],
                                [teams[0][2], teams[0][3]],
                                [teams[0][4], teams[0][5]],
                                [teams[0][6], teams[0][7]],
                                [teams[0][8], teams[0][9]],
                                [teams[0][10], teams[0][11]],
                                [teams[0][12], teams[0][13]],
                                [teams[0][14], teams[0][15]],
                            ])}
                            <div className="hidden lg:block absolute top-[calc(25%+1rem)] left-full h-[2.3px] w-[16px] bg-secondary"></div>
                            <div className="hidden lg:block absolute bottom-[calc(25%+2.5rem)] left-[calc(100%)] h-[2.3px] w-[16px] bg-secondary"></div>

                        </div>
                        <div className="w-full lg:mt-20 lg:w-1/6 mt-10 flex flex-col relative">
                            <div>
                                {renderSection("1W-0L", [
                                    [teams[1][0], teams[1][1]],
                                    [teams[1][2], teams[1][3]],
                                    [teams[1][4], teams[1][5]],
                                    [teams[1][6], teams[1][7]],
                                ])}
                                <div className="hidden lg:block absolute top-[5rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[30rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                            <div className="mt-10">
                                {renderSection("0W-1L", [
                                    [teams[1][9], teams[1][10]],
                                    [teams[1][11], teams[1][12]],
                                    [teams[1][13], teams[1][14]],
                                    [teams[1][15], teams[1][16]],
                                ])}
                                <div className="hidden lg:block absolute top-[52rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[70rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                        </div>
                        <div className="w-full lg:w-1/6 flex mt-10 flex-col relative">
                            <div>
                                {renderSection("2W-0L", [
                                    [teams[2][0], teams[2][1]],
                                    [teams[2][2], teams[2][3]],
                                ])}
                                <div className="hidden lg:block absolute top-[7rem] left-full h-[2px] 2xl:w-[214%] xl:w-[217%] lg:w-[220%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[18rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                            <div className="mt-10">
                                {renderSection("1W-1L", [
                                    [teams[2][5], teams[2][6]],
                                    [teams[2][7], teams[2][8]],
                                    [teams[2][9], teams[2][10]],
                                    [teams[2][11], teams[2][12]],
                                ])}
                                <div className="hidden lg:block absolute top-[35rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[50rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                            <div className="mt-10">
                                {renderSection("0W-2L", [
                                    [teams[2][14], teams[2][15]],
                                    [teams[2][16], teams[2][17]],
                                ])}
                                <div className="hidden lg:block absolute top-[70rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[77rem] left-full h-[2px] 2xl:w-[214%] xl:w-[217%] lg:w-[220%] bg-secondary"></div>
                            </div>
                        </div>
                        <div className="w-full lg:w-1/6 lg:mt-48 mt-10 relative">
                            <div>
                                {renderSection("2W-1L", [
                                    [teams[3][0], teams[3][1]],
                                    [teams[3][2], teams[3][3]],
                                    [teams[3][4], teams[3][5]],
                                ])}
                                <div className="hidden lg:block absolute top-[10rem] left-full h-[2px] 2xl:w-[109%] xl:w-[111%] lg:w-[113%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[25rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                            <div className="mt-10">
                                {renderSection("1W-2L", [
                                    [teams[3][7], teams[3][8]],
                                    [teams[3][9], teams[3][10]],
                                    [teams[3][11], teams[3][12]],
                                ])}
                                <div className="hidden lg:block absolute top-[50rem] left-full h-[2px] 2xl:w-[109%] xl:w-[111%] lg:w-[113%] bg-secondary"></div>
                                <div className="hidden lg:block absolute top-[35rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            </div>
                        </div>
                        <div className="w-full lg:w-1/6 mt-10 lg:mt-[440px] relative">
                            {renderSection(
                                "2W-2L",
                                [
                                    [teams[4]?.[0] || {}, teams[4]?.[1] || {}],
                                    [teams[4]?.[2] || {}, teams[4]?.[3] || {}],
                                    [teams[4]?.[4] || {}, teams[4]?.[5] || {}],
                                ]
                            )}
                            <div className="hidden lg:block absolute top-[4rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                            <div className="hidden lg:block absolute top-[28rem] left-full h-[2px] 2xl:w-[5%] xl:w-[6%] lg:w-[7%] bg-secondary"></div>
                        </div>

                        <div className="w-full lg:w-1/6 mt-10 lg:mt-20 flex flex-col relative">
                            {renderAdvanceSection()}
                            <div className="lg:mt-80 mt-10">
                                {renderEliminateSection()}
                            </div>
                        </div>
                    </div>
                    </div>
                </>
                
            )}
                </div>
            );
};

            export default TournamentBracketAOV16;
